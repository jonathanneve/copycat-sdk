import * as DB from './DB';
import { SQLDriver } from "./SQLDriver";
import { TableDefinition, CustomMetadataDefinition, DataType } from "./DB";
import { TableOptions } from "../interfaces/Nodes";
import { DataRow } from "./Driver";
import * as MySQL from 'mysql';
export declare class MySQLDriver extends SQLDriver {
    connected: boolean;
    transactionActive: boolean;
    connection: MySQL.Connection;
    constructor(Config: MySQL.ConnectionConfig);
    isConnected(): Promise<boolean>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    inTransaction(): Promise<boolean>;
    startTransaction(): Promise<void>;
    commit(): Promise<void>;
    rollback(): Promise<void>;
    executeSQL(sql: string, autocreateTR: boolean, fetchResultSet?: boolean, callback?: (record: DB.Record) => Promise<boolean | void>, params?: Object[]): Promise<boolean>;
    protected dropTable(tableName: string): Promise<void>;
    protected tableExists(tableName: string): Promise<boolean>;
    createTable(table: TableDefinition): Promise<string>;
    listPrimaryKeyFields(tableName: string): Promise<string[]>;
    protected customMetadataExists(objectName: string, objectType: string): Promise<boolean>;
    protected createCustomMetadata(metadata: CustomMetadataDefinition): Promise<void>;
    protected getTriggerNames(tableName: string): Promise<string[]>;
    protected getTriggerSQL(tableOptions: TableOptions, callback: (triggerName: string, sql: string) => Promise<boolean>): Promise<void>;
    triggerExists(triggerName: string): Promise<boolean>;
    dropTriggers(tableName: string): Promise<void>;
    protected getFieldDef(field: DB.FieldDefinition): string;
    protected setReplicatingNode(origNode: string): Promise<void>;
    protected checkRowExists(record: DataRow): Promise<boolean>;
    protected getDataTypesOfFields(tableName: string, keyName: string[]): Promise<DataType[]>;
    protected parseFieldValue(dataType: DataType, fieldValue: string): Promise<Object>;
    listTables(): Promise<string[]>;
    getTableDef(tableName: string, fullFieldDefs: boolean): Promise<TableDefinition>;
    protected getFieldType(sqlType: number): DB.DataType;
    createOrUpdateTable(table: TableDefinition): Promise<string>;
}
